version: 2.1
  
jobs:
  test:
    executor: runner
    steps:
      # - plot-resource-usage
      - checkout
      - run:
          name: Profile CPU and memory every 5s (background)
          command: |
            while true; do
              sleep 5
              printf "\n\n$(date)\n"
              top -b -c -n 1
              echo "======"
              echo "CPU Usage: "$[100-$(vmstat 1 2|tail -1|awk '{print $15}')]"%"
              echo "======"
            done
          background: true
      - run: sudo apt-get install stress
      - run: sudo stress --cpu 1 --timeout 20
      # - run:
      #     command: cat /sys/fs/cgroup/memory/memory.max_usage_in_bytes
      #     when: always
      # - upload-resource-usage-plot

workflows:
  main:
    jobs:
      - test

executors:
  runner:
    docker:
      - image: cimg/base:stable
    resource_class: ryanpedersen/container-runner-local

commands:
  plot-resource-usage:
     description: "Start plotting the resource usage of Docker executor."
     steps:
       - run:
          name: Start collecting resource usage samples
          command: |
             ncpus=$(nproc)
             while true; do
                tstart=$(date +%s%N)                               #nanoseconds since unix epoch timestamp
                cstart=$(cat /sys/fs/cgroup/cpuacct/cpuacct.usage) #nanoseconds of cpu usage at tstart

                sleep 5 #sample interval

                tstop=$(date +%s%N)
                cstop=$(cat /sys/fs/cgroup/cpuacct/cpuacct.usage) #nanoseoncs of cpu usage at tstop

                calc() { awk "BEGIN{printf \"%.2f\", $*}"; }
                cpu=$(calc "($cstop - $cstart) / (($tstop - $tstart) * $ncpus) * 100")
                mem=$(cat /sys/fs/cgroup/memory/memory.usage_in_bytes  | awk '{ byte=$1 /1024/1024; print byte "m" }')
                now=$(date +%s)

                echo $now $mem $cpu
             done >> usage.dat
          background: true

  upload-resource-usage-plot:
    description: "upload a plot of the resource usage collected with the plot-resource usage command."
    steps:
      - run:
         name: Ensure plotting program is installed
         command: |
           if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
           $SUDO apt update -yy
           $SUDO apt install gnuplot -yy
      - run:
         name: Generate plot
         command: |
            title=${CIRCLE_JOB}
            gnuplot -c /dev/stdin usage.dat plot.png $title \<<EOF
            reset
            set terminal png enhanced size 800,600 background rgb "#151515"
            set output 'plot.png'
            set tics textcolor rgb "#ffffff"
            set border lc rgb "#ffffff"

            infile=ARG1
            outfile=ARG2
            plotname=ARG3

            set style line 1 lc rgb "#00ffff"
            set style line 2 lc rgb "#ff00ff"
            set style line 3 lc rgb "#ffff00"
            set mxtics
            set mytics
            set grid
            set xtics nomirror
            set xdata time
            set timefmt "%s"
            set ytics nomirror
            set y2tics nomirror
            set key textcolor rgb "#ffffff" bottom right
            set title textcolor rgb "#ffffff" noenhanced
            set xlabel "Time" textcolor rgb "#ffffff" font ',15'
            set ylabel "Memory Usage" textcolor rgb "#ffffff" font ',15'
            set format y '%.1s%cB'
            set y2label "CPU Usage" textcolor rgb "#ffffff" font ',15'
            set format y2 '%.0f%%'
            set title plotname font ',20'
            set autoscale y
            set autoscale y2
            set xtics rotate 60

            resolveUnit(u,mul,x)=(pos=strstrt(x,u), pos > 0 ? sprintf("%f",real(substr(x,1,pos - 1))*mul) : x)
            resolveUnits(x)=(resolveUnit("g",1024*1024*1024,resolveUnit("m",1024*1024,x)))
            check(x)=(real(resolveUnits(x)))
            if (exists("outfile") && strlen(outfile) > 0) {
                print "Outputting to the file ", outfile
                set term png
                set output outfile
            }

            plot infile u 1:3 with lp axes x1y2 title "cpu" linestyle 2 smooth bezier, \
            infile using 1:(check(stringcolumn(2))) with linespoints title "memory" linestyle 1 smooth bezier
            EOF

      - store_artifacts:
         path: plot.png
# VS Code Extension Version: 1.0.0